%% Attempt at proof of the pumping lemma

def pumpingLemma
   \forall \Sigma \in FinSets
      \forall L \in \power(Strings(\Sigma))
        Regular(L) \implies
          \exists n \in \naturals
              \forall w \in L
                 |w| \ge n \implies
       	           \exists x, y, z \in Strings(\Sigma)
		      w = x \cdot y \cdot z \wedge
		      |x y| \le n \wedge
		      |y| \ge 1
                      \forall k \in \naturals
		         x \cdot y^k \cdot z \in L

%% That's a big theorem!   Parameters for when to use it?

%% Using the pumping lemma.
%% Suppose L = { 0^n 1^n | n \ge 0 }  [what notation for this?]
%% notation:  L = { "0"^n "1"^n \mid n \ge 0 }

%% proof
var \Sigma \in FinSets  [alphabets?]
pumpingLemma by import("pumpingLemma")  [it's checked and valid in library]
P1: subproof
    A1: L \subseteq Strings(\Sigma) \wedge Regular(L) by asssumption
    %% Get huge formula starting with \exists n ....
    C1: \exists n \in \naturals ...
    %% This requires non-trivial instantiation.
    %% Can I make it easier by parameterizing pumpingLemma?
    %% Or make a proof schema?
    P2: subproof
       %% existential elimination
       var n \in \naturals  [make n > 0? see C10 below]
       C2: \forall w in L ...
       P3: subproof
	  A2: w = "0"^n \cdot "1"^n  %% "w" is just a short name? Let?  
	  C3: |w| \ge n by stringProps(A2)
          C4: \exists x,y,z \in Strings(\Sigma) ...
          P4: subproof  %% existentialElim?
                var x, y, z \in Strings(\Sigma)
            A5: w = x \cdot y \cdot z \wedge \ldots by assumption
	    C6: w = x \cdot y \cdot z by obvious
	    C7: |x \cdot y| \le n by obvious
	    C?: y \in "0"^*  --- easy to prove using regular languages props.  But can I use it?
	    C?: |y| \ge 1
	    C8: \forall k \in \naturals ... by obvious
            C9: <C8 with k = 0> \in L  univInst  
	    C10: <C8 with k = 0> \not\in L stringProps(???)  -- NOT CLEAR HOW TO PROVE THIS.
            false by proplogic (C9, C10)
          C11: false by existElim(P4)
         ....

Major issues:
   * Complexity of instantiating, etc.  Can proof be simplified by
     - theorem parameters?
     - More powerful rule?
     - proof template?
   * How to avoid writing out giant formulas?
   * Reasoning.  How do I prove that x y^k z \not\in L for k != 1?
     not in L means not in 0^n 1^n  -- extended decision procedures with string exponentiation?
        Not regular, don't know what n is.
     Need to know that y has at least one 0 and no ones.
        Number of 0's in x y^k is |x| + k|y| .  Number of 1's is still n (how do we know?)
	z \in 0^(n - |xy|) 1^n
     Look at a bunch of proofs and come up with a string theory that can deal with them?

Other examples:
     * nonlinear numbers of 1's (alphabet of size
       Proof techniques?  i^2 is not in the set {d | d = a + kb + c} [not quite right]
     * w w^R -- also letter counting
     * 0^i 1^j 2^k where i > j or j > k ?
     I think variables in the exponents are a problem.

How do I even write "same number of 0's as 1's"?

Need a character counting function?  This is the cardinality of the
preimage of the string, considered as a function (map back from
letters to sets of indices).

Notation: |x^{-1}('a')| ?  Can I use this in the decision procedure,
even if students don't use the notation?

Is there a nice decidable theory?

Is there a decision procedure or theory that can deal with it?

Facts:  Exponentiating a string multiplies character counts by exponent -- that's easy.

*** Too hard for this year? *** 