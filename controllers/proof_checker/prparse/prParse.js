/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var prParse = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"top":3,"defs":4,"EOF":5,"proof":6,"abbrev":7,"DEF":8,"SYMBOL":9,"(":10,"vardecllist":11,")":12,":":13,"e":14,"END":15,"label":16,"PROOF":17,"varlist":18,"conclusions":19,"VAR":20,"conclusion":21,"BY":22,"justification":23,"transPred":24,"=":25,"<":26,"\\\\le":27,">":28,"\\\\ge":29,"\\\\subset":30,"\\\\subseteq":31,"\\\\supset":32,"\\\\supseteq":33,"\\\\logeq":34,"justargs":35,",":36,"\\\\T":37,"\\\\F":38,"\\\\vee":39,"\\\\implies":40,"\\\\bicond":41,"\\\\xor":42,"\\\\wedge":43,"\\\\neg":44,"\\\\forall":45,"\\\\exists":46,"+":47,"-":48,"\\\\cdot":49,"/":50,"^":51,"\\\\cup":52,"\\\\cap":53,"\\\\times":54,"\\\\backslash":55,"\\\\powset":56,"{":57,"}":58,"[":59,"\\\\ldots":60,"]":61,"\\\\emptyset":62,"\\\\integers":63,"\\\\rationals":64,"\\\\reals":65,"\\\\naturals":66,"\\\\in":67,"\\\\{":68,"|":69,"\\\\}":70,"\\\\relation":71,"\\\\to":72,"exprlist":73,".":74,"recorddecllist":75,"tupleexprlist":76,"NUMBER":77,"STRING":78,"\\\\lambda":79,"if":80,"then":81,"else":82,"endif":83,"vardecl":84,"vardecllist1":85,"recorddecl":86,"\\\\mapsto":87,"recorddecllist1":88,"symlist":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"DEF",9:"SYMBOL",10:"(",12:")",13:":",15:"END",17:"PROOF",20:"VAR",22:"BY",25:"=",26:"<",27:"\\\\le",28:">",29:"\\\\ge",30:"\\\\subset",31:"\\\\subseteq",32:"\\\\supset",33:"\\\\supseteq",34:"\\\\logeq",36:",",37:"\\\\T",38:"\\\\F",39:"\\\\vee",40:"\\\\implies",41:"\\\\bicond",42:"\\\\xor",43:"\\\\wedge",44:"\\\\neg",45:"\\\\forall",46:"\\\\exists",47:"+",48:"-",49:"\\\\cdot",50:"/",51:"^",52:"\\\\cup",53:"\\\\cap",54:"\\\\times",55:"\\\\backslash",56:"\\\\powset",57:"{",58:"}",59:"[",60:"\\\\ldots",61:"]",62:"\\\\emptyset",63:"\\\\integers",64:"\\\\rationals",65:"\\\\reals",66:"\\\\naturals",67:"\\\\in",68:"\\\\{",69:"|",70:"\\\\}",71:"\\\\relation",72:"\\\\to",74:".",77:"NUMBER",78:"STRING",79:"\\\\lambda",80:"if",81:"then",82:"else",83:"endif",87:"\\\\mapsto"},
productions_: [0,[3,2],[3,2],[4,2],[4,2],[4,0],[7,8],[6,5],[6,3],[18,2],[18,0],[16,2],[19,1],[19,1],[19,2],[19,2],[21,4],[21,4],[21,1],[21,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[23,1],[23,4],[35,1],[35,3],[14,1],[14,1],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,4],[14,4],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,3],[14,3],[14,3],[14,3],[14,4],[14,5],[14,1],[14,1],[14,1],[14,1],[14,1],[14,3],[14,3],[14,3],[14,3],[14,3],[14,7],[14,6],[14,3],[14,3],[14,4],[14,3],[14,3],[14,3],[14,3],[14,1],[14,1],[14,1],[14,4],[14,7],[14,5],[14,1],[73,1],[73,3],[76,3],[76,3],[84,3],[84,1],[85,3],[85,1],[11,1],[86,3],[88,3],[88,1],[75,1],[89,3],[89,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 3: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 5: this.$ = []; 
break;
case 6:
       var sym = makeExpr('Symbol', [$$[$0-6]]);
       this.$ = makeExpr('def', [sym, makeExpr('\\lambda', [$$[$0-4], $$[$0-1] ])]);
    
break;
case 7:
            this.$ = ['PROOF', $$[$0-4]];
	    this.$.push($$[$0-2]);
	    this.$ = this.$.concat($$[$0-1]);
         
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = makeExpr('vardecllist', []); 
break;
case 11: this.$ = $$[$0-1]; 
break;
case 12: this.$ = [$$[$0]]; 
break;
case 13: this.$ = [$$[$0]]; 
break;
case 14:this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 15:this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 16: this.$ = ['CONCLUSION', $$[$0-3], $$[$0-2], $$[$0]]; 
break;
case 17:
    	  this.$ = ['CONCLUSION', null, makeExpr($$[$0-3], [exprProto.lhsMarker, $$[$0-2]]), $$[$0]];
	
break;
case 18: this.$ = $$[$0]; 
break;
case 20: this.$ = '='; 
break;
case 21: this.$ = '<'; 
break;
case 22: this.$ = '\\le'; 
break;
case 23: this.$ = '>'; 
break;
case 24: this.$ = '\\ge'; 
break;
case 25: this.$ = '\\subset' 
break;
case 26: this.$ = '\\subseteq'; 
break;
case 27: this.$ = '\\supset'; 
break;
case 28: this.$ = '\\supseteq'; 
break;
case 29: this.$ = '\\logeq'; 
break;
case 30: this.$ = [$$[$0]]; 
break;
case 31: this.$ = $$[$0-1]; this.$.unshift($$[$0-3]); 
break;
case 32: this.$ = [$$[$0]]; 
break;
case 33: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 34: this.$ = exprProto.trueVal; 
break;
case 35: this.$ = exprProto.falseVal; 
break;
case 36:this.$ = makeExpr('\\vee', [$$[$0-2], $$[$0]]);
break;
case 37:this.$ = makeExpr('\\implies', [$$[$0-2], $$[$0]]);
break;
case 38:this.$ = makeExpr('\\bicond', [$$[$0-2], $$[$0]]);
break;
case 39:this.$ = makeExpr('\\xor', [$$[$0-2], $$[$0]]);
break;
case 40:this.$ = makeExpr('\\wedge', [$$[$0-2], $$[$0]]);
break;
case 41:this.$ = makeExpr('\\neg', [$$[$0]]);
break;
case 42:this.$ = makeExpr('\\forall', [$$[$0-2], $$[$0]]); 
break;
case 43:this.$ = makeExpr('\\exists', [$$[$0-2], $$[$0]]); 
break;
case 44:this.$ = makeExpr('=', [$$[$0-2], $$[$0]]); 
break;
case 45:this.$ = makeExpr('\\logeq', [$$[$0-2], $$[$0]]); 
break;
case 46:this.$ = makeExpr('\\le', [$$[$0-2], $$[$0] ]); 
break;
case 47:this.$ = makeExpr('\\ge', [$$[$0-2], $$[$0]]); 
break;
case 48:this.$ = makeExpr('<', [$$[$0-2], $$[$0]]); 
break;
case 49:this.$ = makeExpr('>', [$$[$0-2], $$[$0]]); 
break;
case 50:this.$ = makeExpr('+', [$$[$0-2], $$[$0]]);
break;
case 51:this.$ = makeExpr('-', [$$[$0-2], $$[$0]]);
break;
case 52:this.$ = makeExpr('\\cdot', [$$[$0-2], $$[$0]]);
break;
case 53:this.$ = makeExpr('/', [$$[$0-2], $$[$0]]);
break;
case 54:this.$ = makeExpr('^', [$$[$0-2], $$[$0]]);
break;
case 55:this.$ = makeExpr('#UMINUS', [$$[$0]]);
break;
case 56:this.$ = makeExpr('\\cup', [$$[$0-2], $$[$0]]);
break;
case 57:this.$ = makeExpr('\\cap', [$$[$0-2], $$[$0]]);
break;
case 58:this.$ = makeExpr('\\times', [$$[$0-2], $$[$0]]);
break;
case 59:this.$ = makeExpr('\\backslash', [$$[$0-2], $$[$0]]);
break;
case 60:this.$ = makeExpr('\\powset', [$$[$0-3], $$[$0-1]]);
break;
case 61: this.$ = makeExpr('\\ldots', [$$[$0-3], $$[$0-1]]); 
break;
case 62:this.$ = makeExpr('\\emptyset', []);
break;
case 63:this.$ = makeExpr('\\integers', []);
break;
case 64:this.$ = makeExpr('\\rationals', []);
break;
case 65:this.$ = makeExpr('\\reals', []);
break;
case 66:this.$ = makeExpr('\\naturals', []);
break;
case 67:this.$ = makeExpr('\\in', [$$[$0-2], $$[$0] ]); 
break;
case 68:this.$ = makeExpr('\\subseteq', [$$[$0-2], $$[$0]]);
break;
case 69:this.$ = makeExpr('\\supseteq', [$$[$0-2], $$[$0]]);
break;
case 70:this.$ = makeExpr('\\subset', [$$[$0-2], $$[$0]]);
break;
case 71:this.$ = makeExpr('\\supset', [$$[$0-2], $$[$0]]); 
break;
case 72:
          this.$ = makeExpr('comprehension', [$$[$0-5], $$[$0-3], $$[$0-1]]);
      
break;
case 73:
	this.$ = makeExpr('\\relation', [$$[$0-4], $$[$0-2], $$[$0]]);
      
break;
case 74: this.$ = makeExpr('Set', $$[$0-1]); 
break;
case 75: this.$ = makeExpr("getfield", [$$[$0-2], $$[$0]]); 
break;
case 76:  /* op in function is Symbol expr */   
         this.$ = makeExpr($$[$0-3], $$[$0-1]); 
break;
case 77: this.$ = makeExpr($$[$0-2], []); 
break;
case 78: this.$ = makeExpr('recordfields', $$[$0-1]); 
break;
case 79: this.$ = makeExpr('Tuple', $$[$0-1]); 
break;
case 80:this.$ = $$[$0-1]; 
break;
case 81:this.$ = makeExpr('Number', [parseInt($$[$0])]) ;
break;
case 82:this.$ = makeExpr('Symbol', [$$[$0]]) ;
break;
case 83: this.$ = makeExpr('String', [$$[$0]]); 
break;
case 84: this.$ = makeExpr('\\lambda', [$$[$0-2], $$[$0] ]); 
break;
case 85: this.$ = makeExpr('ite', [$$[$0-5], $$[$0-3], $$[$0-1] ]); 
break;
case 86: throw new Error("if-then must have else."); 
break;
case 88: this.$ = [ $$[$0]]; 
break;
case 89: $$[$0-2].push($$[$0]);
       this.$ = $$[$0-2];
     
break;
case 90: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 91:
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 92: this.$ = makeExpr('vardecl', [makeExpr('Symbol', [$$[$0-2]]), $$[$0] ]); 
break;
case 93: this.$ = makeExpr('vardecl', [makeExpr('Symbol', [$$[$0]]), exprProto.anyMarker]); 
break;
case 94: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 95: this.$ = [ $$[$0] ]; 
break;
case 96: this.$ = makeExpr('vardecllist', $$[$0]); 
break;
case 97: this.$ = makeExpr("\\mapsto", [$$[$0-2], $$[$0]]); 
break;
case 98: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 99: this.$ = [ $$[$0] ]; 
break;
case 100: this.$ = $$[$0]; 
break;
case 101: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 102: this.$ = [ $$[$0] ] ; 
break;
}
},
table: [{2:[1,3],3:1,4:2,5:[2,5],8:[2,5],9:[2,5],17:[2,5]},{1:[3]},{5:[1,4],6:5,7:6,8:[1,9],9:[1,10],16:7,17:[1,8]},{5:[1,11]},{1:[2,1]},{5:[2,3],8:[2,3],9:[2,3],17:[2,3]},{5:[2,4],8:[2,4],9:[2,4],17:[2,4]},{17:[1,12]},{2:[1,13]},{9:[1,14]},{13:[1,15]},{1:[2,2]},{2:[2,10],8:[2,10],9:[2,10],17:[2,10],18:16,20:[1,17],25:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10]},{15:[1,18]},{10:[1,19]},{2:[2,11],9:[2,11],10:[2,11],17:[2,11],37:[2,11],38:[2,11],44:[2,11],45:[2,11],46:[2,11],48:[2,11],56:[2,11],59:[2,11],62:[2,11],63:[2,11],64:[2,11],65:[2,11],66:[2,11],68:[2,11],71:[2,11],77:[2,11],78:[2,11],79:[2,11],80:[2,11]},{2:[1,26],6:25,7:22,8:[1,9],9:[1,10],16:23,17:[1,8],19:20,21:21,24:24,25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36]},{9:[1,40],11:37,84:39,85:38},{2:[2,8],5:[2,8],8:[2,8],9:[2,8],15:[2,8],17:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8]},{9:[1,40],11:41,84:39,85:38},{2:[1,26],6:25,7:44,8:[1,9],9:[1,10],15:[1,42],16:23,17:[1,8],21:43,24:24,25:[1,27],26:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36]},{2:[2,12],8:[2,12],9:[2,12],15:[2,12],17:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12]},{2:[2,13],8:[2,13],9:[2,13],15:[2,13],17:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13]},{2:[1,67],9:[1,63],10:[1,61],14:45,17:[1,12],37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:68,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,18],8:[2,18],9:[2,18],15:[2,18],17:[2,18],25:[2,18],26:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18]},{2:[2,19],8:[2,19],9:[2,19],15:[2,19],17:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19]},{2:[2,20],9:[2,20],10:[2,20],37:[2,20],38:[2,20],44:[2,20],45:[2,20],46:[2,20],48:[2,20],56:[2,20],59:[2,20],62:[2,20],63:[2,20],64:[2,20],65:[2,20],66:[2,20],68:[2,20],71:[2,20],77:[2,20],78:[2,20],79:[2,20],80:[2,20]},{2:[2,21],9:[2,21],10:[2,21],37:[2,21],38:[2,21],44:[2,21],45:[2,21],46:[2,21],48:[2,21],56:[2,21],59:[2,21],62:[2,21],63:[2,21],64:[2,21],65:[2,21],66:[2,21],68:[2,21],71:[2,21],77:[2,21],78:[2,21],79:[2,21],80:[2,21]},{2:[2,22],9:[2,22],10:[2,22],37:[2,22],38:[2,22],44:[2,22],45:[2,22],46:[2,22],48:[2,22],56:[2,22],59:[2,22],62:[2,22],63:[2,22],64:[2,22],65:[2,22],66:[2,22],68:[2,22],71:[2,22],77:[2,22],78:[2,22],79:[2,22],80:[2,22]},{2:[2,23],9:[2,23],10:[2,23],37:[2,23],38:[2,23],44:[2,23],45:[2,23],46:[2,23],48:[2,23],56:[2,23],59:[2,23],62:[2,23],63:[2,23],64:[2,23],65:[2,23],66:[2,23],68:[2,23],71:[2,23],77:[2,23],78:[2,23],79:[2,23],80:[2,23]},{2:[2,24],9:[2,24],10:[2,24],37:[2,24],38:[2,24],44:[2,24],45:[2,24],46:[2,24],48:[2,24],56:[2,24],59:[2,24],62:[2,24],63:[2,24],64:[2,24],65:[2,24],66:[2,24],68:[2,24],71:[2,24],77:[2,24],78:[2,24],79:[2,24],80:[2,24]},{2:[2,25],9:[2,25],10:[2,25],37:[2,25],38:[2,25],44:[2,25],45:[2,25],46:[2,25],48:[2,25],56:[2,25],59:[2,25],62:[2,25],63:[2,25],64:[2,25],65:[2,25],66:[2,25],68:[2,25],71:[2,25],77:[2,25],78:[2,25],79:[2,25],80:[2,25]},{2:[2,26],9:[2,26],10:[2,26],37:[2,26],38:[2,26],44:[2,26],45:[2,26],46:[2,26],48:[2,26],56:[2,26],59:[2,26],62:[2,26],63:[2,26],64:[2,26],65:[2,26],66:[2,26],68:[2,26],71:[2,26],77:[2,26],78:[2,26],79:[2,26],80:[2,26]},{2:[2,27],9:[2,27],10:[2,27],37:[2,27],38:[2,27],44:[2,27],45:[2,27],46:[2,27],48:[2,27],56:[2,27],59:[2,27],62:[2,27],63:[2,27],64:[2,27],65:[2,27],66:[2,27],68:[2,27],71:[2,27],77:[2,27],78:[2,27],79:[2,27],80:[2,27]},{2:[2,28],9:[2,28],10:[2,28],37:[2,28],38:[2,28],44:[2,28],45:[2,28],46:[2,28],48:[2,28],56:[2,28],59:[2,28],62:[2,28],63:[2,28],64:[2,28],65:[2,28],66:[2,28],68:[2,28],71:[2,28],77:[2,28],78:[2,28],79:[2,28],80:[2,28]},{2:[2,29],9:[2,29],10:[2,29],37:[2,29],38:[2,29],44:[2,29],45:[2,29],46:[2,29],48:[2,29],56:[2,29],59:[2,29],62:[2,29],63:[2,29],64:[2,29],65:[2,29],66:[2,29],68:[2,29],71:[2,29],77:[2,29],78:[2,29],79:[2,29],80:[2,29]},{2:[2,9],8:[2,9],9:[2,9],17:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9]},{2:[2,96],8:[2,96],9:[2,96],12:[2,96],13:[2,96],17:[2,96],25:[2,96],26:[2,96],27:[2,96],28:[2,96],29:[2,96],30:[2,96],31:[2,96],32:[2,96],33:[2,96],34:[2,96],36:[1,69]},{2:[2,95],8:[2,95],9:[2,95],12:[2,95],13:[2,95],17:[2,95],25:[2,95],26:[2,95],27:[2,95],28:[2,95],29:[2,95],30:[2,95],31:[2,95],32:[2,95],33:[2,95],34:[2,95],36:[2,95]},{2:[2,93],8:[2,93],9:[2,93],12:[2,93],13:[2,93],17:[2,93],25:[2,93],26:[2,93],27:[2,93],28:[2,93],29:[2,93],30:[2,93],31:[2,93],32:[2,93],33:[2,93],34:[2,93],36:[2,93],67:[1,70]},{12:[1,71]},{2:[2,7],5:[2,7],8:[2,7],9:[2,7],15:[2,7],17:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],34:[2,7]},{2:[2,14],8:[2,14],9:[2,14],15:[2,14],17:[2,14],25:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14]},{2:[2,15],8:[2,15],9:[2,15],15:[2,15],17:[2,15],25:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15]},{10:[1,99],22:[1,72],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{2:[2,34],8:[2,34],9:[2,34],10:[2,34],12:[2,34],13:[2,34],15:[2,34],17:[2,34],22:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],36:[2,34],39:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[2,34],51:[2,34],52:[2,34],53:[2,34],54:[2,34],55:[2,34],58:[2,34],60:[2,34],61:[2,34],67:[2,34],69:[2,34],70:[2,34],72:[2,34],74:[2,34],81:[2,34],82:[2,34],83:[2,34]},{2:[2,35],8:[2,35],9:[2,35],10:[2,35],12:[2,35],13:[2,35],15:[2,35],17:[2,35],22:[2,35],25:[2,35],26:[2,35],27:[2,35],28:[2,35],29:[2,35],30:[2,35],31:[2,35],32:[2,35],33:[2,35],34:[2,35],36:[2,35],39:[2,35],40:[2,35],41:[2,35],42:[2,35],43:[2,35],47:[2,35],48:[2,35],49:[2,35],50:[2,35],51:[2,35],52:[2,35],53:[2,35],54:[2,35],55:[2,35],58:[2,35],60:[2,35],61:[2,35],67:[2,35],69:[2,35],70:[2,35],72:[2,35],74:[2,35],81:[2,35],82:[2,35],83:[2,35]},{2:[1,67],9:[1,63],10:[1,61],14:100,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{9:[1,40],11:101,84:39,85:38},{9:[1,40],11:102,84:39,85:38},{2:[1,67],9:[1,63],10:[1,61],14:103,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{57:[1,104]},{2:[1,67],9:[1,107],10:[1,61],14:105,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],75:106,77:[1,62],78:[1,64],79:[1,65],80:[1,66],86:109,88:108},{2:[2,62],8:[2,62],9:[2,62],10:[2,62],12:[2,62],13:[2,62],15:[2,62],17:[2,62],22:[2,62],25:[2,62],26:[2,62],27:[2,62],28:[2,62],29:[2,62],30:[2,62],31:[2,62],32:[2,62],33:[2,62],34:[2,62],36:[2,62],39:[2,62],40:[2,62],41:[2,62],42:[2,62],43:[2,62],47:[2,62],48:[2,62],49:[2,62],50:[2,62],51:[2,62],52:[2,62],53:[2,62],54:[2,62],55:[2,62],58:[2,62],60:[2,62],61:[2,62],67:[2,62],69:[2,62],70:[2,62],72:[2,62],74:[2,62],81:[2,62],82:[2,62],83:[2,62]},{2:[2,63],8:[2,63],9:[2,63],10:[2,63],12:[2,63],13:[2,63],15:[2,63],17:[2,63],22:[2,63],25:[2,63],26:[2,63],27:[2,63],28:[2,63],29:[2,63],30:[2,63],31:[2,63],32:[2,63],33:[2,63],34:[2,63],36:[2,63],39:[2,63],40:[2,63],41:[2,63],42:[2,63],43:[2,63],47:[2,63],48:[2,63],49:[2,63],50:[2,63],51:[2,63],52:[2,63],53:[2,63],54:[2,63],55:[2,63],58:[2,63],60:[2,63],61:[2,63],67:[2,63],69:[2,63],70:[2,63],72:[2,63],74:[2,63],81:[2,63],82:[2,63],83:[2,63]},{2:[2,64],8:[2,64],9:[2,64],10:[2,64],12:[2,64],13:[2,64],15:[2,64],17:[2,64],22:[2,64],25:[2,64],26:[2,64],27:[2,64],28:[2,64],29:[2,64],30:[2,64],31:[2,64],32:[2,64],33:[2,64],34:[2,64],36:[2,64],39:[2,64],40:[2,64],41:[2,64],42:[2,64],43:[2,64],47:[2,64],48:[2,64],49:[2,64],50:[2,64],51:[2,64],52:[2,64],53:[2,64],54:[2,64],55:[2,64],58:[2,64],60:[2,64],61:[2,64],67:[2,64],69:[2,64],70:[2,64],72:[2,64],74:[2,64],81:[2,64],82:[2,64],83:[2,64]},{2:[2,65],8:[2,65],9:[2,65],10:[2,65],12:[2,65],13:[2,65],15:[2,65],17:[2,65],22:[2,65],25:[2,65],26:[2,65],27:[2,65],28:[2,65],29:[2,65],30:[2,65],31:[2,65],32:[2,65],33:[2,65],34:[2,65],36:[2,65],39:[2,65],40:[2,65],41:[2,65],42:[2,65],43:[2,65],47:[2,65],48:[2,65],49:[2,65],50:[2,65],51:[2,65],52:[2,65],53:[2,65],54:[2,65],55:[2,65],58:[2,65],60:[2,65],61:[2,65],67:[2,65],69:[2,65],70:[2,65],72:[2,65],74:[2,65],81:[2,65],82:[2,65],83:[2,65]},{2:[2,66],8:[2,66],9:[2,66],10:[2,66],12:[2,66],13:[2,66],15:[2,66],17:[2,66],22:[2,66],25:[2,66],26:[2,66],27:[2,66],28:[2,66],29:[2,66],30:[2,66],31:[2,66],32:[2,66],33:[2,66],34:[2,66],36:[2,66],39:[2,66],40:[2,66],41:[2,66],42:[2,66],43:[2,66],47:[2,66],48:[2,66],49:[2,66],50:[2,66],51:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[2,66],58:[2,66],60:[2,66],61:[2,66],67:[2,66],69:[2,66],70:[2,66],72:[2,66],74:[2,66],81:[2,66],82:[2,66],83:[2,66]},{2:[1,67],9:[1,63],10:[1,61],14:110,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],73:111,77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:112,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:114,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],76:113,77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,81],8:[2,81],9:[2,81],10:[2,81],12:[2,81],13:[2,81],15:[2,81],17:[2,81],22:[2,81],25:[2,81],26:[2,81],27:[2,81],28:[2,81],29:[2,81],30:[2,81],31:[2,81],32:[2,81],33:[2,81],34:[2,81],36:[2,81],39:[2,81],40:[2,81],41:[2,81],42:[2,81],43:[2,81],47:[2,81],48:[2,81],49:[2,81],50:[2,81],51:[2,81],52:[2,81],53:[2,81],54:[2,81],55:[2,81],58:[2,81],60:[2,81],61:[2,81],67:[2,81],69:[2,81],70:[2,81],72:[2,81],74:[2,81],81:[2,81],82:[2,81],83:[2,81]},{2:[2,82],8:[2,82],9:[2,82],10:[2,82],12:[2,82],13:[2,82],15:[2,82],17:[2,82],22:[2,82],25:[2,82],26:[2,82],27:[2,82],28:[2,82],29:[2,82],30:[2,82],31:[2,82],32:[2,82],33:[2,82],34:[2,82],36:[2,82],39:[2,82],40:[2,82],41:[2,82],42:[2,82],43:[2,82],47:[2,82],48:[2,82],49:[2,82],50:[2,82],51:[2,82],52:[2,82],53:[2,82],54:[2,82],55:[2,82],58:[2,82],60:[2,82],61:[2,82],67:[2,82],69:[2,82],70:[2,82],72:[2,82],74:[2,82],81:[2,82],82:[2,82],83:[2,82]},{2:[2,83],8:[2,83],9:[2,83],10:[2,83],12:[2,83],13:[2,83],15:[2,83],17:[2,83],22:[2,83],25:[2,83],26:[2,83],27:[2,83],28:[2,83],29:[2,83],30:[2,83],31:[2,83],32:[2,83],33:[2,83],34:[2,83],36:[2,83],39:[2,83],40:[2,83],41:[2,83],42:[2,83],43:[2,83],47:[2,83],48:[2,83],49:[2,83],50:[2,83],51:[2,83],52:[2,83],53:[2,83],54:[2,83],55:[2,83],58:[2,83],60:[2,83],61:[2,83],67:[2,83],69:[2,83],70:[2,83],72:[2,83],74:[2,83],81:[2,83],82:[2,83],83:[2,83]},{9:[1,40],11:115,84:39,85:38},{2:[1,67],9:[1,63],10:[1,61],14:116,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,87],8:[2,87],9:[2,87],10:[2,87],12:[2,87],13:[2,87],15:[2,87],17:[2,87],22:[2,87],25:[2,87],26:[2,87],27:[2,87],28:[2,87],29:[2,87],30:[2,87],31:[2,87],32:[2,87],33:[2,87],34:[2,87],36:[2,87],39:[2,87],40:[2,87],41:[2,87],42:[2,87],43:[2,87],47:[2,87],48:[2,87],49:[2,87],50:[2,87],51:[2,87],52:[2,87],53:[2,87],54:[2,87],55:[2,87],58:[2,87],60:[2,87],61:[2,87],67:[2,87],69:[2,87],70:[2,87],72:[2,87],74:[2,87],81:[2,87],82:[2,87],83:[2,87]},{10:[1,99],22:[1,117],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{9:[1,40],84:118},{2:[1,67],9:[1,63],10:[1,61],14:119,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{13:[1,120]},{9:[1,122],23:121},{2:[1,67],9:[1,63],10:[1,61],14:123,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:124,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:125,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:126,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:127,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:128,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:129,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:130,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:131,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:132,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:133,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:134,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:135,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:136,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:137,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:138,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:139,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:140,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:141,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:142,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:143,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:144,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:145,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:146,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:147,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:148,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],12:[1,150],14:151,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],73:149,77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,41],8:[2,41],9:[2,41],10:[1,99],12:[2,41],13:[2,41],15:[2,41],17:[2,41],22:[2,41],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[2,41],36:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,41],60:[2,41],61:[2,41],67:[1,93],69:[2,41],70:[2,41],72:[2,41],74:[1,98],81:[2,41],82:[2,41],83:[2,41]},{13:[1,152]},{13:[1,153]},{2:[2,55],8:[2,55],9:[2,55],10:[1,99],12:[2,55],13:[2,55],15:[2,55],17:[2,55],22:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],30:[2,55],31:[2,55],32:[2,55],33:[2,55],34:[2,55],36:[2,55],39:[2,55],40:[2,55],41:[2,55],42:[2,55],43:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],51:[1,88],52:[2,55],53:[2,55],54:[2,55],55:[2,55],58:[2,55],60:[2,55],61:[2,55],67:[2,55],69:[2,55],70:[2,55],72:[2,55],74:[1,98],81:[2,55],82:[2,55],83:[2,55]},{2:[1,67],9:[1,63],10:[1,61],14:154,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],60:[1,155],67:[1,93],74:[1,98]},{61:[1,156]},{10:[2,82],25:[2,82],26:[2,82],27:[2,82],28:[2,82],29:[2,82],30:[2,82],31:[2,82],32:[2,82],33:[2,82],34:[2,82],39:[2,82],40:[2,82],41:[2,82],42:[2,82],43:[2,82],47:[2,82],48:[2,82],49:[2,82],50:[2,82],51:[2,82],52:[2,82],53:[2,82],54:[2,82],55:[2,82],60:[2,82],67:[2,82],74:[2,82],87:[1,157]},{36:[1,158],61:[2,100]},{36:[2,99],61:[2,99]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[2,88],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],69:[1,159],70:[2,88],74:[1,98]},{36:[1,161],70:[1,160]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],72:[1,162],74:[1,98]},{12:[1,163],36:[1,164]},{10:[1,99],12:[1,165],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[1,166],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{13:[1,167]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98],81:[1,168]},{9:[1,122],23:169},{2:[2,94],8:[2,94],9:[2,94],12:[2,94],13:[2,94],17:[2,94],25:[2,94],26:[2,94],27:[2,94],28:[2,94],29:[2,94],30:[2,94],31:[2,94],32:[2,94],33:[2,94],34:[2,94],36:[2,94]},{2:[2,92],8:[2,92],9:[2,92],10:[1,99],12:[2,92],13:[2,92],17:[2,92],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[2,92],31:[2,92],32:[2,92],33:[2,92],34:[2,92],36:[2,92],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{2:[1,67],9:[1,63],10:[1,61],14:170,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,16],8:[2,16],9:[2,16],15:[2,16],17:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16]},{2:[2,30],8:[2,30],9:[2,30],10:[1,171],15:[2,30],17:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30]},{2:[2,36],8:[2,36],9:[2,36],10:[1,99],12:[2,36],13:[2,36],15:[2,36],17:[2,36],22:[2,36],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[2,36],36:[2,36],39:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,36],60:[2,36],61:[2,36],67:[1,93],69:[2,36],70:[2,36],72:[2,36],74:[1,98],81:[2,36],82:[2,36],83:[2,36]},{2:[2,37],8:[2,37],9:[2,37],10:[1,99],12:[2,37],13:[2,37],15:[2,37],17:[2,37],22:[2,37],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[2,37],36:[2,37],39:[1,73],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,37],60:[2,37],61:[2,37],67:[1,93],69:[2,37],70:[2,37],72:[2,37],74:[1,98],81:[2,37],82:[2,37],83:[2,37]},{2:[2,38],8:[2,38],9:[2,38],10:[1,99],12:[2,38],13:[2,38],15:[2,38],17:[2,38],22:[2,38],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[2,38],36:[2,38],39:[1,73],40:[2,38],41:[2,38],42:[2,38],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,38],60:[2,38],61:[2,38],67:[1,93],69:[2,38],70:[2,38],72:[2,38],74:[1,98],81:[2,38],82:[2,38],83:[2,38]},{2:[2,39],8:[2,39],9:[2,39],10:[1,99],12:[2,39],13:[2,39],15:[2,39],17:[2,39],22:[2,39],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[2,39],36:[2,39],39:[1,73],40:[2,39],41:[2,39],42:[2,39],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,39],60:[2,39],61:[2,39],67:[1,93],69:[2,39],70:[2,39],72:[2,39],74:[1,98],81:[2,39],82:[2,39],83:[2,39]},{2:[2,40],8:[2,40],9:[2,40],10:[1,99],12:[2,40],13:[2,40],15:[2,40],17:[2,40],22:[2,40],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[2,40],36:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,40],60:[2,40],61:[2,40],67:[1,93],69:[2,40],70:[2,40],72:[2,40],74:[1,98],81:[2,40],82:[2,40],83:[2,40]},{2:[2,44],8:[2,44],9:[2,44],10:[1,99],12:[2,44],13:[2,44],15:[2,44],17:[2,44],22:[2,44],30:[2,44],31:[2,44],32:[2,44],33:[2,44],34:[2,44],36:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,44],53:[2,44],54:[2,44],55:[2,44],58:[2,44],60:[2,44],61:[2,44],67:[2,44],69:[2,44],70:[2,44],72:[2,44],74:[1,98],81:[2,44],82:[2,44],83:[2,44]},{2:[2,45],8:[2,45],9:[2,45],10:[1,99],12:[2,45],13:[2,45],15:[2,45],17:[2,45],22:[2,45],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],36:[2,45],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,45],60:[2,45],61:[2,45],67:[1,93],69:[2,45],70:[2,45],72:[2,45],74:[1,98],81:[2,45],82:[2,45],83:[2,45]},{2:[2,46],8:[2,46],9:[2,46],10:[1,99],12:[2,46],13:[2,46],15:[2,46],17:[2,46],22:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],36:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,46],53:[2,46],54:[2,46],55:[2,46],58:[2,46],60:[2,46],61:[2,46],67:[2,46],69:[2,46],70:[2,46],72:[2,46],74:[1,98],81:[2,46],82:[2,46],83:[2,46]},{2:[2,47],8:[2,47],9:[2,47],10:[1,99],12:[2,47],13:[2,47],15:[2,47],17:[2,47],22:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],34:[2,47],36:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,47],53:[2,47],54:[2,47],55:[2,47],58:[2,47],60:[2,47],61:[2,47],67:[2,47],69:[2,47],70:[2,47],72:[2,47],74:[1,98],81:[2,47],82:[2,47],83:[2,47]},{2:[2,48],8:[2,48],9:[2,48],10:[1,99],12:[2,48],13:[2,48],15:[2,48],17:[2,48],22:[2,48],30:[2,48],31:[2,48],32:[2,48],33:[2,48],34:[2,48],36:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,48],53:[2,48],54:[2,48],55:[2,48],58:[2,48],60:[2,48],61:[2,48],67:[2,48],69:[2,48],70:[2,48],72:[2,48],74:[1,98],81:[2,48],82:[2,48],83:[2,48]},{2:[2,49],8:[2,49],9:[2,49],10:[1,99],12:[2,49],13:[2,49],15:[2,49],17:[2,49],22:[2,49],30:[2,49],31:[2,49],32:[2,49],33:[2,49],34:[2,49],36:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,49],53:[2,49],54:[2,49],55:[2,49],58:[2,49],60:[2,49],61:[2,49],67:[2,49],69:[2,49],70:[2,49],72:[2,49],74:[1,98],81:[2,49],82:[2,49],83:[2,49]},{2:[2,50],8:[2,50],9:[2,50],10:[1,99],12:[2,50],13:[2,50],15:[2,50],17:[2,50],22:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],31:[2,50],32:[2,50],33:[2,50],34:[2,50],36:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],47:[2,50],48:[2,50],49:[1,86],50:[1,87],51:[1,88],52:[2,50],53:[2,50],54:[2,50],55:[2,50],58:[2,50],60:[2,50],61:[2,50],67:[2,50],69:[2,50],70:[2,50],72:[2,50],74:[1,98],81:[2,50],82:[2,50],83:[2,50]},{2:[2,51],8:[2,51],9:[2,51],10:[1,99],12:[2,51],13:[2,51],15:[2,51],17:[2,51],22:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],33:[2,51],34:[2,51],36:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],43:[2,51],47:[2,51],48:[2,51],49:[1,86],50:[1,87],51:[1,88],52:[2,51],53:[2,51],54:[2,51],55:[2,51],58:[2,51],60:[2,51],61:[2,51],67:[2,51],69:[2,51],70:[2,51],72:[2,51],74:[1,98],81:[2,51],82:[2,51],83:[2,51]},{2:[2,52],8:[2,52],9:[2,52],10:[1,99],12:[2,52],13:[2,52],15:[2,52],17:[2,52],22:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],30:[2,52],31:[2,52],32:[2,52],33:[2,52],34:[2,52],36:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],43:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[1,88],52:[2,52],53:[2,52],54:[2,52],55:[2,52],58:[2,52],60:[2,52],61:[2,52],67:[2,52],69:[2,52],70:[2,52],72:[2,52],74:[1,98],81:[2,52],82:[2,52],83:[2,52]},{2:[2,53],8:[2,53],9:[2,53],10:[1,99],12:[2,53],13:[2,53],15:[2,53],17:[2,53],22:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],30:[2,53],31:[2,53],32:[2,53],33:[2,53],34:[2,53],36:[2,53],39:[2,53],40:[2,53],41:[2,53],42:[2,53],43:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[1,88],52:[2,53],53:[2,53],54:[2,53],55:[2,53],58:[2,53],60:[2,53],61:[2,53],67:[2,53],69:[2,53],70:[2,53],72:[2,53],74:[1,98],81:[2,53],82:[2,53],83:[2,53]},{2:[2,54],8:[2,54],9:[2,54],10:[1,99],12:[2,54],13:[2,54],15:[2,54],17:[2,54],22:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],30:[2,54],31:[2,54],32:[2,54],33:[2,54],34:[2,54],36:[2,54],39:[2,54],40:[2,54],41:[2,54],42:[2,54],43:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],51:[1,88],52:[2,54],53:[2,54],54:[2,54],55:[2,54],58:[2,54],60:[2,54],61:[2,54],67:[2,54],69:[2,54],70:[2,54],72:[2,54],74:[1,98],81:[2,54],82:[2,54],83:[2,54]},{2:[2,56],8:[2,56],9:[2,56],10:[1,99],12:[2,56],13:[2,56],15:[2,56],17:[2,56],22:[2,56],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[2,56],31:[2,56],32:[2,56],33:[2,56],34:[2,56],36:[2,56],39:[2,56],40:[2,56],41:[2,56],42:[2,56],43:[2,56],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,56],53:[1,90],54:[1,91],55:[2,56],58:[2,56],60:[2,56],61:[2,56],67:[2,56],69:[2,56],70:[2,56],72:[2,56],74:[1,98],81:[2,56],82:[2,56],83:[2,56]},{2:[2,57],8:[2,57],9:[2,57],10:[1,99],12:[2,57],13:[2,57],15:[2,57],17:[2,57],22:[2,57],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[2,57],31:[2,57],32:[2,57],33:[2,57],34:[2,57],36:[2,57],39:[2,57],40:[2,57],41:[2,57],42:[2,57],43:[2,57],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,57],53:[2,57],54:[1,91],55:[2,57],58:[2,57],60:[2,57],61:[2,57],67:[2,57],69:[2,57],70:[2,57],72:[2,57],74:[1,98],81:[2,57],82:[2,57],83:[2,57]},{2:[2,58],8:[2,58],9:[2,58],10:[1,99],12:[2,58],13:[2,58],15:[2,58],17:[2,58],22:[2,58],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[2,58],31:[2,58],32:[2,58],33:[2,58],34:[2,58],36:[2,58],39:[2,58],40:[2,58],41:[2,58],42:[2,58],43:[2,58],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,58],53:[2,58],54:[2,58],55:[2,58],58:[2,58],60:[2,58],61:[2,58],67:[2,58],69:[2,58],70:[2,58],72:[2,58],74:[1,98],81:[2,58],82:[2,58],83:[2,58]},{2:[2,59],8:[2,59],9:[2,59],10:[1,99],12:[2,59],13:[2,59],15:[2,59],17:[2,59],22:[2,59],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[2,59],31:[2,59],32:[2,59],33:[2,59],34:[2,59],36:[2,59],39:[2,59],40:[2,59],41:[2,59],42:[2,59],43:[2,59],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,59],53:[1,90],54:[1,91],55:[2,59],58:[2,59],60:[2,59],61:[2,59],67:[2,59],69:[2,59],70:[2,59],72:[2,59],74:[1,98],81:[2,59],82:[2,59],83:[2,59]},{2:[2,67],8:[2,67],9:[2,67],10:[1,99],12:[2,67],13:[2,67],15:[2,67],17:[2,67],22:[2,67],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[2,67],31:[2,67],32:[2,67],33:[2,67],34:[2,67],36:[2,67],39:[2,67],40:[2,67],41:[2,67],42:[2,67],43:[2,67],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,67],60:[2,67],61:[2,67],69:[2,67],70:[2,67],72:[2,67],74:[1,98],81:[2,67],82:[2,67],83:[2,67]},{2:[2,68],8:[2,68],9:[2,68],10:[1,99],12:[2,68],13:[2,68],15:[2,68],17:[2,68],22:[2,68],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],34:[2,68],36:[2,68],39:[2,68],40:[2,68],41:[2,68],42:[2,68],43:[2,68],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,68],60:[2,68],61:[2,68],67:[1,93],69:[2,68],70:[2,68],72:[2,68],74:[1,98],81:[2,68],82:[2,68],83:[2,68]},{2:[2,69],8:[2,69],9:[2,69],10:[1,99],12:[2,69],13:[2,69],15:[2,69],17:[2,69],22:[2,69],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],34:[2,69],36:[2,69],39:[2,69],40:[2,69],41:[2,69],42:[2,69],43:[2,69],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,69],60:[2,69],61:[2,69],67:[1,93],69:[2,69],70:[2,69],72:[2,69],74:[1,98],81:[2,69],82:[2,69],83:[2,69]},{2:[2,70],8:[2,70],9:[2,70],10:[1,99],12:[2,70],13:[2,70],15:[2,70],17:[2,70],22:[2,70],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],34:[2,70],36:[2,70],39:[2,70],40:[2,70],41:[2,70],42:[2,70],43:[2,70],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,70],60:[2,70],61:[2,70],67:[1,93],69:[2,70],70:[2,70],72:[2,70],74:[1,98],81:[2,70],82:[2,70],83:[2,70]},{2:[2,71],8:[2,71],9:[2,71],10:[1,99],12:[2,71],13:[2,71],15:[2,71],17:[2,71],22:[2,71],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],34:[2,71],36:[2,71],39:[2,71],40:[2,71],41:[2,71],42:[2,71],43:[2,71],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,71],60:[2,71],61:[2,71],67:[1,93],69:[2,71],70:[2,71],72:[2,71],74:[1,98],81:[2,71],82:[2,71],83:[2,71]},{2:[2,75],8:[2,75],9:[2,75],10:[2,75],12:[2,75],13:[2,75],15:[2,75],17:[2,75],22:[2,75],25:[2,75],26:[2,75],27:[2,75],28:[2,75],29:[2,75],30:[2,75],31:[2,75],32:[2,75],33:[2,75],34:[2,75],36:[2,75],39:[2,75],40:[2,75],41:[2,75],42:[2,75],43:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],51:[2,75],52:[2,75],53:[2,75],54:[2,75],55:[2,75],58:[2,75],60:[2,75],61:[2,75],67:[2,75],69:[2,75],70:[2,75],72:[2,75],74:[2,75],81:[2,75],82:[2,75],83:[2,75]},{12:[1,172],36:[1,161]},{2:[2,77],8:[2,77],9:[2,77],10:[2,77],12:[2,77],13:[2,77],15:[2,77],17:[2,77],22:[2,77],25:[2,77],26:[2,77],27:[2,77],28:[2,77],29:[2,77],30:[2,77],31:[2,77],32:[2,77],33:[2,77],34:[2,77],36:[2,77],39:[2,77],40:[2,77],41:[2,77],42:[2,77],43:[2,77],47:[2,77],48:[2,77],49:[2,77],50:[2,77],51:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],58:[2,77],60:[2,77],61:[2,77],67:[2,77],69:[2,77],70:[2,77],72:[2,77],74:[2,77],81:[2,77],82:[2,77],83:[2,77]},{10:[1,99],12:[2,88],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[2,88],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{2:[1,67],9:[1,63],10:[1,61],14:173,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:174,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[1,175],67:[1,93],74:[1,98]},{2:[1,67],9:[1,63],10:[1,61],14:176,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,78],8:[2,78],9:[2,78],10:[2,78],12:[2,78],13:[2,78],15:[2,78],17:[2,78],22:[2,78],25:[2,78],26:[2,78],27:[2,78],28:[2,78],29:[2,78],30:[2,78],31:[2,78],32:[2,78],33:[2,78],34:[2,78],36:[2,78],39:[2,78],40:[2,78],41:[2,78],42:[2,78],43:[2,78],47:[2,78],48:[2,78],49:[2,78],50:[2,78],51:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],58:[2,78],60:[2,78],61:[2,78],67:[2,78],69:[2,78],70:[2,78],72:[2,78],74:[2,78],81:[2,78],82:[2,78],83:[2,78]},{2:[1,67],9:[1,63],10:[1,61],14:177,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{9:[1,179],86:178},{9:[1,40],11:180,84:39,85:38},{2:[2,74],8:[2,74],9:[2,74],10:[2,74],12:[2,74],13:[2,74],15:[2,74],17:[2,74],22:[2,74],25:[2,74],26:[2,74],27:[2,74],28:[2,74],29:[2,74],30:[2,74],31:[2,74],32:[2,74],33:[2,74],34:[2,74],36:[2,74],39:[2,74],40:[2,74],41:[2,74],42:[2,74],43:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],51:[2,74],52:[2,74],53:[2,74],54:[2,74],55:[2,74],58:[2,74],60:[2,74],61:[2,74],67:[2,74],69:[2,74],70:[2,74],72:[2,74],74:[2,74],81:[2,74],82:[2,74],83:[2,74]},{2:[1,67],9:[1,63],10:[1,61],14:181,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:182,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,79],8:[2,79],9:[2,79],10:[2,79],12:[2,79],13:[2,79],15:[2,79],17:[2,79],22:[2,79],25:[2,79],26:[2,79],27:[2,79],28:[2,79],29:[2,79],30:[2,79],31:[2,79],32:[2,79],33:[2,79],34:[2,79],36:[2,79],39:[2,79],40:[2,79],41:[2,79],42:[2,79],43:[2,79],47:[2,79],48:[2,79],49:[2,79],50:[2,79],51:[2,79],52:[2,79],53:[2,79],54:[2,79],55:[2,79],58:[2,79],60:[2,79],61:[2,79],67:[2,79],69:[2,79],70:[2,79],72:[2,79],74:[2,79],81:[2,79],82:[2,79],83:[2,79]},{2:[1,67],9:[1,63],10:[1,61],14:183,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,80],8:[2,80],9:[2,80],10:[2,80],12:[2,80],13:[2,80],15:[2,80],17:[2,80],22:[2,80],25:[2,80],26:[2,80],27:[2,80],28:[2,80],29:[2,80],30:[2,80],31:[2,80],32:[2,80],33:[2,80],34:[2,80],36:[2,80],39:[2,80],40:[2,80],41:[2,80],42:[2,80],43:[2,80],47:[2,80],48:[2,80],49:[2,80],50:[2,80],51:[2,80],52:[2,80],53:[2,80],54:[2,80],55:[2,80],58:[2,80],60:[2,80],61:[2,80],67:[2,80],69:[2,80],70:[2,80],72:[2,80],74:[2,80],81:[2,80],82:[2,80],83:[2,80]},{2:[1,67],9:[1,63],10:[1,61],14:184,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:185,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:186,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,17],8:[2,17],9:[2,17],15:[2,17],17:[2,17],25:[2,17],26:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17]},{10:[1,99],15:[1,187],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{9:[1,189],35:188},{2:[2,76],8:[2,76],9:[2,76],10:[2,76],12:[2,76],13:[2,76],15:[2,76],17:[2,76],22:[2,76],25:[2,76],26:[2,76],27:[2,76],28:[2,76],29:[2,76],30:[2,76],31:[2,76],32:[2,76],33:[2,76],34:[2,76],36:[2,76],39:[2,76],40:[2,76],41:[2,76],42:[2,76],43:[2,76],47:[2,76],48:[2,76],49:[2,76],50:[2,76],51:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],58:[2,76],60:[2,76],61:[2,76],67:[2,76],69:[2,76],70:[2,76],72:[2,76],74:[2,76],81:[2,76],82:[2,76],83:[2,76]},{2:[2,42],8:[2,42],9:[2,42],10:[1,99],12:[2,42],13:[2,42],15:[2,42],17:[2,42],22:[2,42],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],36:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,42],53:[2,42],54:[2,42],55:[2,42],58:[2,42],60:[2,42],61:[2,42],67:[2,42],69:[2,42],70:[2,42],72:[2,42],74:[1,98],81:[2,42],82:[2,42],83:[2,42]},{2:[2,43],8:[2,43],9:[2,43],10:[1,99],12:[2,43],13:[2,43],15:[2,43],17:[2,43],22:[2,43],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[2,43],31:[2,43],32:[2,43],33:[2,43],34:[2,43],36:[2,43],39:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[2,43],53:[2,43],54:[2,43],55:[2,43],58:[2,43],60:[2,43],61:[2,43],67:[2,43],69:[2,43],70:[2,43],72:[2,43],74:[1,98],81:[2,43],82:[2,43],83:[2,43]},{2:[2,60],8:[2,60],9:[2,60],10:[2,60],12:[2,60],13:[2,60],15:[2,60],17:[2,60],22:[2,60],25:[2,60],26:[2,60],27:[2,60],28:[2,60],29:[2,60],30:[2,60],31:[2,60],32:[2,60],33:[2,60],34:[2,60],36:[2,60],39:[2,60],40:[2,60],41:[2,60],42:[2,60],43:[2,60],47:[2,60],48:[2,60],49:[2,60],50:[2,60],51:[2,60],52:[2,60],53:[2,60],54:[2,60],55:[2,60],58:[2,60],60:[2,60],61:[2,60],67:[2,60],69:[2,60],70:[2,60],72:[2,60],74:[2,60],81:[2,60],82:[2,60],83:[2,60]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],61:[1,190],67:[1,93],74:[1,98]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[2,97],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],61:[2,97],67:[1,93],74:[1,98]},{36:[2,98],61:[2,98]},{87:[1,157]},{13:[1,191]},{10:[1,99],12:[2,89],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[2,89],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],70:[2,89],74:[1,98]},{10:[1,99],13:[1,192],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{10:[1,99],12:[2,91],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[2,91],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{10:[1,99],12:[2,90],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[2,90],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98]},{2:[2,84],8:[2,84],9:[2,84],10:[1,99],12:[2,84],13:[2,84],15:[2,84],17:[2,84],22:[2,84],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[2,84],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,84],60:[2,84],61:[2,84],67:[1,93],69:[2,84],70:[2,84],72:[2,84],74:[1,98],81:[2,84],82:[2,84],83:[2,84]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98],82:[1,193],83:[1,194]},{2:[2,6],5:[2,6],8:[2,6],9:[2,6],15:[2,6],17:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],34:[2,6]},{12:[1,195],36:[1,196]},{12:[2,32],36:[2,32]},{2:[2,61],8:[2,61],9:[2,61],10:[2,61],12:[2,61],13:[2,61],15:[2,61],17:[2,61],22:[2,61],25:[2,61],26:[2,61],27:[2,61],28:[2,61],29:[2,61],30:[2,61],31:[2,61],32:[2,61],33:[2,61],34:[2,61],36:[2,61],39:[2,61],40:[2,61],41:[2,61],42:[2,61],43:[2,61],47:[2,61],48:[2,61],49:[2,61],50:[2,61],51:[2,61],52:[2,61],53:[2,61],54:[2,61],55:[2,61],58:[2,61],60:[2,61],61:[2,61],67:[2,61],69:[2,61],70:[2,61],72:[2,61],74:[2,61],81:[2,61],82:[2,61],83:[2,61]},{2:[1,67],9:[1,63],10:[1,61],14:197,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:198,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[1,67],9:[1,63],10:[1,61],14:199,37:[1,46],38:[1,47],44:[1,48],45:[1,49],46:[1,50],48:[1,51],56:[1,52],59:[1,53],62:[1,54],63:[1,55],64:[1,56],65:[1,57],66:[1,58],68:[1,59],71:[1,60],77:[1,62],78:[1,64],79:[1,65],80:[1,66]},{2:[2,86],8:[2,86],9:[2,86],10:[2,86],12:[2,86],13:[2,86],15:[2,86],17:[2,86],22:[2,86],25:[2,86],26:[2,86],27:[2,86],28:[2,86],29:[2,86],30:[2,86],31:[2,86],32:[2,86],33:[2,86],34:[2,86],36:[2,86],39:[2,86],40:[2,86],41:[2,86],42:[2,86],43:[2,86],47:[2,86],48:[2,86],49:[2,86],50:[2,86],51:[2,86],52:[2,86],53:[2,86],54:[2,86],55:[2,86],58:[2,86],60:[2,86],61:[2,86],67:[2,86],69:[2,86],70:[2,86],72:[2,86],74:[2,86],81:[2,86],82:[2,86],83:[2,86]},{2:[2,31],8:[2,31],9:[2,31],15:[2,31],17:[2,31],25:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31]},{9:[1,200]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],70:[1,201],74:[1,98]},{2:[2,73],8:[2,73],9:[2,73],10:[1,99],12:[2,73],13:[2,73],15:[2,73],17:[2,73],22:[2,73],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],36:[2,73],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],58:[2,73],60:[2,73],61:[2,73],67:[1,93],69:[2,73],70:[2,73],72:[2,73],74:[1,98],81:[2,73],82:[2,73],83:[2,73]},{10:[1,99],25:[1,78],26:[1,82],27:[1,80],28:[1,83],29:[1,81],30:[1,96],31:[1,94],32:[1,97],33:[1,95],34:[1,79],39:[1,73],40:[1,74],41:[1,75],42:[1,76],43:[1,77],47:[1,84],48:[1,85],49:[1,86],50:[1,87],51:[1,88],52:[1,89],53:[1,90],54:[1,91],55:[1,92],67:[1,93],74:[1,98],83:[1,202]},{12:[2,33],36:[2,33]},{2:[2,72],8:[2,72],9:[2,72],10:[2,72],12:[2,72],13:[2,72],15:[2,72],17:[2,72],22:[2,72],25:[2,72],26:[2,72],27:[2,72],28:[2,72],29:[2,72],30:[2,72],31:[2,72],32:[2,72],33:[2,72],34:[2,72],36:[2,72],39:[2,72],40:[2,72],41:[2,72],42:[2,72],43:[2,72],47:[2,72],48:[2,72],49:[2,72],50:[2,72],51:[2,72],52:[2,72],53:[2,72],54:[2,72],55:[2,72],58:[2,72],60:[2,72],61:[2,72],67:[2,72],69:[2,72],70:[2,72],72:[2,72],74:[2,72],81:[2,72],82:[2,72],83:[2,72]},{2:[2,85],8:[2,85],9:[2,85],10:[2,85],12:[2,85],13:[2,85],15:[2,85],17:[2,85],22:[2,85],25:[2,85],26:[2,85],27:[2,85],28:[2,85],29:[2,85],30:[2,85],31:[2,85],32:[2,85],33:[2,85],34:[2,85],36:[2,85],39:[2,85],40:[2,85],41:[2,85],42:[2,85],43:[2,85],47:[2,85],48:[2,85],49:[2,85],50:[2,85],51:[2,85],52:[2,85],53:[2,85],54:[2,85],55:[2,85],58:[2,85],60:[2,85],61:[2,85],67:[2,85],69:[2,85],70:[2,85],72:[2,85],74:[2,85],81:[2,85],82:[2,85],83:[2,85]}],
defaultActions: {4:[2,1],11:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    var ranges = this.lexer.options && this.lexer.options.ranges;

    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || EOF; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

/* Global variables */
   var _label;			// holds label during grammar actions.
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* comment (suboptimal, but easy) */
break;
case 2:return 'function';
break;
case 3:return 'eval';
break;
case 4:return 'domain'
break;
case 5:return 'codomain'
break;
case 6: yy_.yytext=yy_.yytext.substring(1, yy_.yytext.length-1); return 78; 
break;
case 7:return 40
break;
case 8:return 41
break;
case 9:return ';';
break;
case 10:return 69;
break;
case 11:return 37;
break;
case 12:return 38;
break;
case 13:return 37;
break;
case 14:return 38;
break;
case 15:return 10
break;
case 16:return 12
break;
case 17:return 68
break;
case 18:return 70
break;
case 19:return 36
break;
case 20:return 13
break;
case 21:return 54
break;
case 22:return 50
break;
case 23:return 48
break;
case 24:return 47
break;
case 25:return 49
break;
case 26:return 49
break;
case 27:return 51
break;
case 28:return 34
break;
case 29:return 34
break;
case 30:return 25
break;
case 31:return '\\ne'
break;
case 32:return 29
break;
case 33:return 29
break;
case 34:return 27
break;
case 35:return 27
break;
case 36:return 26
break;
case 37:return 28
break;
case 38:return 59
break;
case 39:return 61
break;
case 40:return 63
break;
case 41:return 65
break;
case 42:return 64
break;
case 43:return 66
break;
case 44:return 62
break;
case 45:return 52
break;
case 46:return 53
break;
case 47:return 56
break;
case 48:return 60
break;
case 49:return 67
break;
case 50:return 31
break;
case 51:return 33
break;
case 52:return 30
break;
case 53:return 32
break;
case 54:return 60
break;
case 55:return 39
break;
case 56:return 39
break;
case 57:return 39
break;
case 58:return 40
break;
case 59:return 41
break;
case 60:return 42
break;
case 61:return 42
break;
case 62:return 43
break;
case 63:return 43
break;
case 64:return 43
break;
case 65:return 44
break;
case 66:return 44
break;
case 67:return 45
break;
case 68:return 45
break;
case 69:return 46
break;
case 70:return 46
break;
case 71:return 71
break;
case 72:return 72
break;
case 73:return 87
break;
case 74:return 79
break;
case 75:return 80
break;
case 76:return 81
break;
case 77:return 82
break;
case 78:return 83
break;
case 79:return 74
break;
case 80:return 77
break;
case 81:return 8
break;
case 82:return 17
break;
case 83:return 15
break;
case 84:return 22
break;
case 85:return 20
break;
case 86:return 9
break;
case 87:return 5
break;
case 88:
		      // print("illegal char");  return 'INVALID_CHAR';
		      return "INVALID_CHAR";
		      
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:function\b)/,/^(?:eval\b)/,/^(?:domain\b)/,/^(?:codomain\b)/,/^(?:"([^"\\]|(\\(.|\n)))*")/,/^(?:->)/,/^(?:<->)/,/^(?:;)/,/^(?:\|)/,/^(?:T\b)/,/^(?:F\b)/,/^(?:\\T\b)/,/^(?:\\F\b)/,/^(?:\()/,/^(?:\))/,/^(?:\\\{)/,/^(?:\\\})/,/^(?:,)/,/^(?::)/,/^(?:\\times\b)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\\cdot\b)/,/^(?:\*)/,/^(?:\^)/,/^(?:\\logeq\b)/,/^(?:<=>)/,/^(?:=)/,/^(?:\\ne\b)/,/^(?:\\ge\b)/,/^(?:>=)/,/^(?:\\le\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\[)/,/^(?:\])/,/^(?:\\integers\b)/,/^(?:\\reals\b)/,/^(?:\\rationals\b)/,/^(?:\\naturals\b)/,/^(?:\\emptyset\b)/,/^(?:\\cup\b)/,/^(?:\\cap\b)/,/^(?:\\powset\b)/,/^(?:\\ldots\b)/,/^(?:\\in\b)/,/^(?:\\subseteq\b)/,/^(?:\\supseteq\b)/,/^(?:\\subset\b)/,/^(?:\\supset\b)/,/^(?:\\ldots\b)/,/^(?:\\vee\b)/,/^(?:vv\b)/,/^(?:or\b)/,/^(?:\\implies\b)/,/^(?:\\bicond\b)/,/^(?:\\xor\b)/,/^(?:o\+)/,/^(?:\\wedge\b)/,/^(?:\^\^)/,/^(?:and\b)/,/^(?:\\neg\b)/,/^(?:not\b)/,/^(?:\\forall\b)/,/^(?:AA\b)/,/^(?:\\exists\b)/,/^(?:EE\b)/,/^(?:\\relation\b)/,/^(?:\\to\b)/,/^(?:\\mapsto\b)/,/^(?:\\lambda\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:endif\b)/,/^(?:\.)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:def\b)/,/^(?:proof\b)/,/^(?:end\b)/,/^(?:by\b)/,/^(?:var\b)/,/^(?:[a-zA-Z]([a-zA-Z0-9])*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = prParse;
exports.Parser = prParse.Parser;
exports.parse = function () { return prParse.parse.apply(prParse, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}