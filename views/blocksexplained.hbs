<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>

  <script src="https://code.jquery.com/jquery-1.9.1.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.0/jquery-ui.min.js"></script>

  <script src = "/javascripts/blocks_world/jquery.ui.droppable.patched.js"></script>
  <script src = "/javascripts/blocks_world/jquery.caret.1.02.js"></script>

  <script src = "/javascripts/blocks_world/blocksworld.js"></script>
  <script src = "/javascripts/blocks_world/nodesubmit.js"></script>
  <script src= "/javascripts/blocks_world/srflaEval.js"></script>
  <script src= "/javascripts/blocks_world/srflaMathParser.js"></script>
  <script src= "/javascripts/blocks_world/blocksParser.js"></script>
  <script src= "/javascripts/blocks_world/displayMath.js"></script>
  <!--<script src= "nodeBlocksWorldServer.js"></script>-->

  <!-- The next script tag defines CS103-specific macros (like \implies) for MathJax.  -->
  <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    "HTML-CSS": { linebreaks: { automatic: true } },
    TeX: {
      Macros: {
        T: "\\mathbf{T}",
        F: "\\mathbf{F}",
        implies: "\\to",
        bicond: "\\leftrightarrow",
        xor: "\\oplus"
      }
    },
  });
  </script>

  <!-- FROM OLD VERSION The next script tag loads mathjax.  This has to follow the macros, etc.-->
  <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

  <link rel="stylesheet" type="text/css" href="/stylesheets/blocksworld.css">
  <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/smoothness/jquery-ui.css" />
</head>

<body>

<h3>CS 103 Blocks World - Explanation</h3>

<p>The "blocks world" is a 5-by-5 grid of squares.  Various colors of
squares can be added, moved, or removed by moving the mouse around.</p>

<p>You can type a first-order logic formula into the text box, and the
program will parse it and check whether it holds in the current blocks
world.</p>

<p>After arranging your blocks and typing your formula, you can press
"Check World" to see whether the formula is true or false in the world.</p>

<p>There must be at least one block in the world, or an error is reported.</p>

<p>Quantified variables represent blocks in the world.  There are predicates
about the colors of the blocks:</p>

<p>\(Blue(x)\), \(Red(x)\), \(Gray(x)\), \(Green(x)\), and \(Yellow(x)\).</p>

<p>There are also predicates about the relative positions of blocks.
<ul>
<li> \( x = y \) says blocks \(x\) and \(y\) are the same.
<li> \( x \not= y \) (<code>x \not= y</code>)
says blocks \(x\) and \(y\) are the different (they occupy different squares).
<li> \(LeftOf(x,y)\) says that block \(x\) is to the left of block \(y\). </li>
<li> \(RightOf(x,y)\) says that block \(x\) is to the right of block \(y\). </li>
<li> \(Above(x,y)\) says that block \(x\) is above block \(y\). </li>
<li> \(Below(x,y)\) says that block \(x\) is below block \(y\). </li>
</ul>
</p>

<p>The syntax uses LaTeX notation.  The formula is printed by MathJax as it is typed.
However, the parser will not accept all formulas that MathJax accepts.</p>

<p>
The <i>connectives</i> are:
<p>
<table>
  <tr>
    <th align="left">Connective</Th>
    <th align="left">Input symbol</th>
  </tr>

  <tr>
    <td>\(\neg\)</td>
    <td><code>not</code></td>
  </tr>
  <tr>
    <td>\(\neg\)</td>
    <td><code>\neg</code></td>
  </tr>
  <tr>
    <td>\(\wedge\)</td>
    <td><code>and</code></td>
  </tr>
  <tr>
    <td>\(\wedge\)</td>
    <td><code>\wedge</code></td>
  </tr>
  <tr>
    <td>\(\vee\)</td>
    <td><code>or</code></td>
  </tr>
  <tr>
    <td>\(\vee\)</td>
    <td><code>\vee</code></td>
  </tr>
  <tr>
    <td>\(\implies\)</td>
    <td><code>-></code></td>
  </tr>
  <tr>
    <td>\(\implies\)</td>
    <td><code>\implies</code></td>
  </tr>
  <tr>
    <td>\(\bicond\)</td>
    <td><code><-></code></td>
  </tr>
  <tr>
    <td>\(\bicond\)</td>
    <td><code>\bicond</code></td>
  </tr>
  <tr>
    <td>\(\xor\)</td>
    <td><code>\xor</code></td>
  </tr>
  <tr>
    <td>\(\forall x\)</td>
    <td><code>AA</code></td>
  </tr>
  <tr>
    <td>\(\forall x\) where \(x\) is a variable</td>
    <td><code>\forall x</code></td>
  </tr>
  <tr>
    <td>\(\exists x\)</td>
    <td><code>EE</code></td>
  </tr>
  <tr>
    <td>\(\exists x\) where \(x\) is a variable</td>
    <td><code>\exists x</code></td>
  </tr>

</table>


<h3> Examples </h3>
<br>
<p>
<code>
\forall x (Red(x) \implies \forall y (Below(x,y)))
</code>
<br>
<code>
\exists x (Red(x) \wedge \forall y (Below(x,y)))
</code>
</p>

<h3> Common errors </h3>

<ul>
<li>Syntax errors will print ugly messages that usually do a good job of
locating the error, except sometimes for missing right parentheses.</li>

<li>Everything is case-sensitive.  Note that all predicates begin with a
capital letter (e.g., "Blue" and "LeftOf").  Anything other than the
predicates listed above will produce an "undefined error" message.</li>

<li>Free variables generate "undefined variable" errors.</li>
</ul>

</body>
</html>
